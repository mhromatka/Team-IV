"""autogenerated by genpy from AU_UAV_ROS/GoToWaypointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GoToWaypointRequest(genpy.Message):
  _md5sum = "2e058964f456d53e9679e3d97faca340"
  _type = "AU_UAV_ROS/GoToWaypointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 planeID
float64 latitude
float64 longitude
float64 altitude
bool isAvoidanceManeuver
bool isNewQueue

"""
  __slots__ = ['planeID','latitude','longitude','altitude','isAvoidanceManeuver','isNewQueue']
  _slot_types = ['int16','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planeID,latitude,longitude,altitude,isAvoidanceManeuver,isNewQueue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoToWaypointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.isAvoidanceManeuver is None:
        self.isAvoidanceManeuver = False
      if self.isNewQueue is None:
        self.isNewQueue = False
    else:
      self.planeID = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.isAvoidanceManeuver = False
      self.isNewQueue = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h3d2B.pack(_x.planeID, _x.latitude, _x.longitude, _x.altitude, _x.isAvoidanceManeuver, _x.isNewQueue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.planeID, _x.latitude, _x.longitude, _x.altitude, _x.isAvoidanceManeuver, _x.isNewQueue,) = _struct_h3d2B.unpack(str[start:end])
      self.isAvoidanceManeuver = bool(self.isAvoidanceManeuver)
      self.isNewQueue = bool(self.isNewQueue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h3d2B.pack(_x.planeID, _x.latitude, _x.longitude, _x.altitude, _x.isAvoidanceManeuver, _x.isNewQueue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.planeID, _x.latitude, _x.longitude, _x.altitude, _x.isAvoidanceManeuver, _x.isNewQueue,) = _struct_h3d2B.unpack(str[start:end])
      self.isAvoidanceManeuver = bool(self.isAvoidanceManeuver)
      self.isNewQueue = bool(self.isNewQueue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h3d2B = struct.Struct("<h3d2B")
"""autogenerated by genpy from AU_UAV_ROS/GoToWaypointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GoToWaypointResponse(genpy.Message):
  _md5sum = "eca8b96616c32aacf1be8bbf14c70eba"
  _type = "AU_UAV_ROS/GoToWaypointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string error


"""
  __slots__ = ['error']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoToWaypointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = ''
    else:
      self.error = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.error
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error = str[start:end].decode('utf-8')
      else:
        self.error = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.error
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error = str[start:end].decode('utf-8')
      else:
        self.error = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class GoToWaypoint(object):
  _type          = 'AU_UAV_ROS/GoToWaypoint'
  _md5sum = 'c8cfaca8efcd99e3add29323eb5d2746'
  _request_class  = GoToWaypointRequest
  _response_class = GoToWaypointResponse
