"""autogenerated by genpy from AU_UAV_ROS/RequestWaypointInfoRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RequestWaypointInfoRequest(genpy.Message):
  _md5sum = "2e653a234de35bdf6da6afeeb9fc6e66"
  _type = "AU_UAV_ROS/RequestWaypointInfoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 planeID
bool isAvoidanceWaypoint
int16 positionInQueue

"""
  __slots__ = ['planeID','isAvoidanceWaypoint','positionInQueue']
  _slot_types = ['int16','bool','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planeID,isAvoidanceWaypoint,positionInQueue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestWaypointInfoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
      if self.isAvoidanceWaypoint is None:
        self.isAvoidanceWaypoint = False
      if self.positionInQueue is None:
        self.positionInQueue = 0
    else:
      self.planeID = 0
      self.isAvoidanceWaypoint = False
      self.positionInQueue = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_hBh.pack(_x.planeID, _x.isAvoidanceWaypoint, _x.positionInQueue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.planeID, _x.isAvoidanceWaypoint, _x.positionInQueue,) = _struct_hBh.unpack(str[start:end])
      self.isAvoidanceWaypoint = bool(self.isAvoidanceWaypoint)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_hBh.pack(_x.planeID, _x.isAvoidanceWaypoint, _x.positionInQueue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.planeID, _x.isAvoidanceWaypoint, _x.positionInQueue,) = _struct_hBh.unpack(str[start:end])
      self.isAvoidanceWaypoint = bool(self.isAvoidanceWaypoint)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_hBh = struct.Struct("<hBh")
"""autogenerated by genpy from AU_UAV_ROS/RequestWaypointInfoResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RequestWaypointInfoResponse(genpy.Message):
  _md5sum = "1a61f6fe0ff5166e7f6ee46d444ffb8e"
  _type = "AU_UAV_ROS/RequestWaypointInfoResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string error
float64 latitude
float64 longitude
float64 altitude


"""
  __slots__ = ['error','latitude','longitude','altitude']
  _slot_types = ['string','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,latitude,longitude,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestWaypointInfoResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.error = ''
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.error
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error = str[start:end].decode('utf-8')
      else:
        self.error = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.latitude, _x.longitude, _x.altitude,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.error
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error = str[start:end].decode('utf-8')
      else:
        self.error = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.latitude, _x.longitude, _x.altitude,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class RequestWaypointInfo(object):
  _type          = 'AU_UAV_ROS/RequestWaypointInfo'
  _md5sum = 'db9e3801b1da39b7fbc4397b931e6587'
  _request_class  = RequestWaypointInfoRequest
  _response_class = RequestWaypointInfoResponse
